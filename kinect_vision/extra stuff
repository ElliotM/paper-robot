void depthCb(const sensor_msgs::ImageConstPtr& msg) {
    if (msg->encoding != enc::TYPE_16UC1)
    {
        //ROS_ERROR(2, "Expected data of type [%s], got [%s]", enc::TYPE_16UC1.c_str(), msg->encoding.c_str());
        //return;
    }

    // Allocate new Image message
    sensor_msgs::ImagePtr depth_msg( new sensor_msgs::Image );
    depth_msg->header   = msg->header;
    depth_msg->encoding = enc::TYPE_32FC1;
    depth_msg->height   = msg->height;
    depth_msg->width    = msg->width;
    depth_msg->step     = msg->width * sizeof (float);
    depth_msg->data.resize( depth_msg->height * depth_msg->step);

    float bad_point = std::numeric_limits<float>::quiet_NaN ();

    // Fill in the depth image data, converting mm to m
    const uint16_t* raw_data = reinterpret_cast<const uint16_t*>(&msg->data[0]);
    float* depth_data = reinterpret_cast<float*>(&depth_msg->data[0]);
    for (unsigned index = 0; index < depth_msg->height * depth_msg->width; ++index)
    {
        uint16_t raw = raw_data[index];
        depth_data[index] = (raw == 0) ? bad_point : (float)raw * 0.001f;
    }
    ROS_INFO("processDepth: %i", depth_data[outputCenter.y*depth_msg->width + outputCenter.x]);
  }
  
  
  





=================================================================================================







  void depthCb(const sensor_msgs::ImageConstPtr& msg) {
    //covert the rosimage into an openCV Mat image
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, enc::MONO16);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }
    
    //store the new Mat image inside of a Mat object for easy access
    depth = cv_ptr->image;
    
    processDepth();
  }
